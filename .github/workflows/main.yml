name: GOSDT CI

# Trigger on pushes to all branches and for all pull-requests
# Allow to run this workflow manually from the Actions tab
on: [push, pull_request, workflow_dispatch]

jobs:
    build:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}
        strategy:
            fail-fast: false
            matrix:
                config:
                    - {
                        name: "Linux x86-64",
                        os: ubuntu-22.04,
                    }
                    - {
                        name: "macOS x86-64",
                        os: macos-12,
                    }
                    - {
                        name: "Windows x86-64",
                        os: windows-2022,
                    }
        steps:
            # Checkout the repo
            - name: Checkout the repo
              uses: actions/checkout@v3
            # Install required development tools: Python 3.7
            - name: Install required development tools - Python 3.7
              uses: actions/setup-python@v4
              with:
                  python-version: '3.7'
            - name: Verify the Python version
              run: |
                  python3 -c "import sys; exit(not (sys.version_info.major == 3 and sys.version_info.minor == 7))"
            # Install required development tools: Ninja
            - name: Install required development tools - Ninja (Ubuntu)
              if: startsWith(matrix.config.os, 'ubuntu')
              run: |
                  sudo apt install -y ninja-build
            - name: Install required development tools - Ninja (macOS)
              if: startsWith(matrix.config.os, 'macos')
              run: |
                  brew install ninja
            - name: Install required development tools - Ninja (Windows)
              if: startsWith(matrix.config.os, 'windows')
              run: |
                  Invoke-WebRequest -Uri "https://github.com/ninja-build/ninja/releases/latest/download/ninja-win.zip" -OutFile "C:\ninja-win.zip"
                  Expand-Archive "C:\ninja-win.zip" -DestinationPath "C:\Windows\"
                  New-Item -Path "C:\Windows\ninja-build.exe" -ItemType SymbolicLink -Value "C:\Windows\ninja.exe"
                  Remove-Item C:\ninja-win.zip
            # Install required development tools: pkg-config
            - name: Install required development tools - pkg-config (Windows)
              if: startsWith(matrix.config.os, 'windows')
              run: |
                  choco install pkgconfiglite
            # Install required development tools: scikit-build
            - name: Install required development tools - scikit-build
              run: |
                  python3 --version
                  pip3 install --upgrade scikit-build
            # Install required development tools: Wheel Fixer
            - name: Install required development tools - Wheel Fixer (Ubuntu)
              if: startsWith(matrix.config.os, 'ubuntu')
              run: |
                  pip3 install --upgrade auditwheel
                  sudo apt install -y patchelf
            - name: Install required development tools - Wheel Fixer (macOS)
              if: startsWith(matrix.config.os, 'macos')
              run: |
                  pip3 install --upgrade delocate
            - name: Install required development tools - Wheel Fixer (Windows)
              if: startsWith(matrix.config.os, 'windows')
              run: |
                  pip3 install --upgrade delvewheel
            # Install required 3rd-party libraries
            - name: Install required 3rd-party libraries (Ubuntu)
              if: startsWith(matrix.config.os, 'ubuntu')
              run: |
                  sudo apt install -y libtbb-dev
                  sudo apt install -y libgmp-dev
            - name: Install required 3rd-party libraries (macOS)
              if: startsWith(matrix.config.os, 'macos')
              run: |
                  brew install tbb
                  brew install gmp
            - name: Install required 3rd-party libraries (Windows)
              if: startsWith(matrix.config.os, 'windows')
              run: |
                  vcpkg install tbb:x64-windows
                  vcpkg install gmp:x64-windows
            # Build the project
            - name: Build the project
              run: |
                  python3 build.py
            # Upload the wheel file
            - name: Upload the wheel file
              uses: actions/upload-artifact@v2
              with:
                  name: Artifacts
                  path: dist/*.whl
    docker:
        name: "CentOS Docker x86-64"
        runs-on: ubuntu-22.04
        steps:
            # Checkout the repo
            - name: Checkout the repo
              uses: actions/checkout@v3
            # Build the wheel with Docker
            # Reference: Using Docker Run inside of GitHub Actions
            # Link: https://aschmelyun.com/blog/using-docker-run-inside-of-github-actions/
            - name: Build the wheel with Docker
              uses: addnab/docker-run-action@v3
              with:
                  image: quay.io/pypa/manylinux2014_x86_64
                  options: -v ${{ github.workspace }}:/source
                  run: |
                      yum install -y zip
                      yum install -y cmake
                      yum install -y ninja-build
                      yum install -y pkgconfig
                      python3.7 -m pip install --upgrade scikit-build
                      python3.7 -m pip install --upgrade auditwheel
                      yum install -y patchelf
                      git clone https://github.com/Microsoft/vcpkg.git
                      ./vcpkg/bootstrap-vcpkg.sh
                      export PATH=/vcpkg:$PATH
                      export VCPKG_INSTALLATION_ROOT=/vcpkg
                      vcpkg install tbb
                      vcpkg install gmp
                      cd /source
                      python3.7 build.py
            # Upload the wheel file
            - name: Upload the wheel file
              uses: actions/upload-artifact@v2
              with:
                  name: Artifacts
                  path: dist/*.whl